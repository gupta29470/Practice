import java.io.*;
import java.util.*;

public class Shell_Rotate {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int rows = sc.nextInt();
        int cols = sc.nextInt();
        int a[][] = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                a[i][j] = sc.nextInt();
            }
        }

        int shell = sc.nextInt();
        int rotate = sc.nextInt();
        shellRotate(a, shell, rotate);
        display(a);

    }

    public static void shellRotate(int a[][], int s, int r) {

        int[] oneD = fillOneD(a, s);
        rotate(oneD, r);
        fillTwoD(a, oneD, s);
    }

    public static int[] fillOneD(int a[][], int s) {
        int minr = s - 1;
        int minc = s - 1;
        int maxr = a.length - s;
        int maxc = a[0].length - s;

        int size = 2 * (maxr - minr + maxc - minc);
        int oneD[] = new int[size];

        int index = 0;
        // left wall
        for (int i = minr; i <= maxr; i++) {
            oneD[index] = a[i][minc];
            index++;
        }
        // below wall
        for (int i = minc + 1; i <= maxc; i++) {
            oneD[index] = a[maxr][i];
            index++;
        }
        // right wall
        for (int i = maxr - 1; i >= minr; i--) {
            oneD[index] = a[i][maxc];
            index++;
        }
        // top wall
        for (int i = maxc - 1; i >= minc + 1; i--) {
            oneD[index] = a[minr][i];
            index++;
        }
        return oneD;

    }

    public static void fillTwoD(int[][] a, int oneD[], int s) {
        int minr = s - 1;
        int minc = s - 1;
        int maxr = a.length - s;
        int maxc = a[0].length - s;
        int index = 0;
        // left wall
        for (int i = minr; i <= maxr; i++) {
            a[i][minc] = oneD[index];
            index++;
        }
        // below wall
        for (int i = minc + 1; i <= maxc; i++) {
            a[maxr][i] = oneD[index];
            index++;
        }
        // right wall
        for (int i = maxr - 1; i >= minr; i--) {
            a[i][maxc] = oneD[index];
            index++;
        }
        // top wall
        for (int i = maxc - 1; i >= minc + 1; i--) {
            a[minr][i] = oneD[index];
            index++;
        }

    }

    public static void reverse(int a[], int start, int end) {
        while (start < end) {
            int temp = a[start];
            a[start] = a[end];
            a[end] = temp;
            start++;
            end--;
        }
    }

    public static void rotate(int a[], int rotate) {
        rotate = rotate % a.length;
        if (rotate < 0) {
            rotate = rotate + a.length;
        }
        reverse(a, 0, a.length - rotate - 1);
        reverse(a, a.length - rotate, a.length - 1);
        reverse(a, 0, a.length - 1);
    }

    public static void display(int[][] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[0].length; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }

    }

}
